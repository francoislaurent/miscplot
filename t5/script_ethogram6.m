
behaviors = {'hunch_large_squares', 'blue'; ...
    'cast_large_squares',   'red'; ...
    'back_large_squares',   'cyan'; ...
    'stop_large_squares',   'green'; ...
    'run_large_squares',    'black'; ...
    'roll_large_squares',   'yellow'; ...
    'small_motion_squares', .5 * [1,1,1]};


ethogram = load('../data/ethogramme.mat');

ntrials = 3300;
rand('seed', 15698812726790480012274691666152165506220855954338243033166107128567733436938819560761317475076882758950135850311990626557494799892480)
ix = randperm(numel(ethogram.ethogramme))(1:ntrials);
ethogram.ethogramme = ethogram.ethogramme(ix);

args = {ethogram, ...
    [105, 115, 125], ...
    'Behavior', behaviors, ...
    'MaxTimeFromOnset', [7,8], ...
    'OnsetTolerance', [.3,.6], ...
    'FillGaps', 1, ...
    'LineWidth', 2};
fs = 18;

for state = {'hunch'} %{'hunch' 'cast' 'back'}

figure();
set(gca, 'FontSize', fs)

state = state{1};
state_ = [state '_large_squares']

order1 = ethogram2(args{:}, ...
    'Exclude', {1, state_}, 'Include', {2, state_});

order2 = ethogram2(args{:}, ...
    'Include', {1, state_}, 'Exclude', {2, state_}, ...
    'ymin', numel(order1));

xlabel('Time from first stimulus onset (s)')
ylabel('Number of animals')

print('-depsc', ['train_' state '_variability.eps'])
close

end%for
